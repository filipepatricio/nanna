schema {
  query: RootQueryType
  mutation: RootMutationType
}

"""A user account"""
type Account {
  """The account email"""
  email: String!

  """The user's first name"""
  firstName: String

  """The account ID"""
  id: Int! @deprecated(reason: "Must use UUID in public communication")

  """The user's last name"""
  lastName: String

  """The account UUID"""
  uuid: UUID!
}

"""An article"""
type Article {
  """The article's image. May be null if no image is available."""
  articleImage: ArticleImage

  """The article's author"""
  author: String

  """Denotes if article is available in user subcription"""
  availableInSubscription: Boolean!

  """The article's categories"""
  categories: [Category]

  """The article's —Åontent blocks"""
  contentBlocks: [ContentBlock]

  """Credit note for this article"""
  credits: String

  """Info about the curator of the article"""
  curationInfo: CurationInfo!

  """Denotes whether this article has an audio version available"""
  hasAudioVersion: Boolean

  """The database ID"""
  id: UUID!

  """The main image"""
  image: CloudinaryImage @deprecated(reason: "Deprecated in favour of the ArticleImage union type")

  """Should the note be collapsible accordeon"""
  isNoteCollapsible: Boolean!

  """The article's kind"""
  kind: ArticleKind

  """Denotes if locked icon should be shown for article"""
  locked: Boolean!

  """Meta information about article"""
  metaInformation: ArticleMetaInformation!

  """The editor's note"""
  note: String

  """Preview text for article content"""
  previewText: Text!

  """The article's primary category"""
  primaryCategory: Category!

  """The articles's reading/listening progress info"""
  progress: ArticleProgress!

  """The article's reading/listening progress"""
  progressState: ArticleProgressState!

  """The date the article was published by the publisher"""
  publicationDate: Date

  """The publisher of this article"""
  publisher: Publisher!

  """The articles's slug to be used in friendly URLs"""
  slug: String!

  """The article's source URL"""
  sourceUrl: String!

  """The article's title without any Markdown formatting"""
  strippedTitle: String!

  """The article content"""
  text: Text!

  """The approximated time it takes to read the article in minutes"""
  timeToRead: Int

  """The article's title"""
  title: String!

  """The type of article determining who can read the article"""
  type: ArticleType!

  """The article's URL used for sharing"""
  url: String!

  """Denotes whether the article is visited by the user"""
  visited: Boolean!

  """The article's word count, i.e. its length"""
  wordCount: Int
}

"""Article image"""
union ArticleImage = CloudinaryImage | RemoteImage

"""An article kind"""
type ArticleKind {
  name: String!
}

"""Meta information about article"""
type ArticleMetaInformation {
  imageUrl: String!
}

"""User's progress in article"""
type ArticleProgress {
  """Position in article's audio in seconds"""
  audioPosition: Int!

  """Article audio file progress percentage 0-100"""
  audioProgress: Int!

  """Article text content progress percentage 0-100"""
  contentProgress: Int!
}

"""Article Progress"""
enum ArticleProgressState {
  FINISHED
  IN_PROGRESS
  UNREAD
}

type ArticlesExploreArea implements ExploreArea {
  articles(pagination: PaginationInput): [Article]!

  """The background color to be used for styling"""
  backgroundColor: HexColor

  """The area's description"""
  description: String

  """The stream's icon"""
  icon: SVG

  """Globally unique identifier for this area"""
  id: String!

  """Should the area be highlighted"""
  isHighlighted: Boolean!

  """Area was selected by user as preferred"""
  isPreferred: Boolean!

  """The name of the area"""
  name: String!
}

type ArticlesListExploreArea implements ExploreArea {
  articles(pagination: PaginationInput): [Article]!

  """The background color to be used for styling"""
  backgroundColor: HexColor

  """The area's description"""
  description: String

  """The stream's icon"""
  icon: SVG

  """Globally unique identifier for this area"""
  id: String!

  """Should the area be highlighted"""
  isHighlighted: Boolean!

  """Area was selected by user as preferred"""
  isPreferred: Boolean!

  """The name of the area"""
  name: String!
}

type ArticlesWithFeatureExploreArea implements ExploreArea {
  articles(pagination: PaginationInput): [Article]!

  """The background color to be used for styling"""
  backgroundColor: HexColor

  """The area's description"""
  description: String

  """The stream's icon"""
  icon: SVG

  """Globally unique identifier for this area"""
  id: String!

  """Should the area be highlighted"""
  isHighlighted: Boolean!

  """Area was selected by user as preferred"""
  isPreferred: Boolean!

  """The name of the area"""
  name: String!
}

"""Type of the article"""
enum ArticleType {
  FREE
  PREMIUM
}

"""An audio file"""
type AudioFile {
  """Credit note for this audio file"""
  credits: String

  """The URL"""
  url: String!
}

"""Authentication tokens"""
type AuthTokens {
  accessToken: String!
  refreshToken: String!
}

"""A bookmark"""
type Bookmark {
  """Bookmark data"""
  entity: BookmarkEntity
  errorCode: String
  errorMessage: String

  """Bookmark ID"""
  id: UUID
}

"""An article or a topic"""
union BookmarkEntity = Article | Topic

"""A bookmark"""
type BookmarkMutationPayload {
  """A bookmark"""
  bookmark: Bookmark
  errorCode: String
  errorMessage: String
  successful: Boolean!
}

"""Options For Bookmarks Filtering"""
enum BookmarksFilterOptions {
  """All bookmarks"""
  ALL

  """Only Article Bookmarks"""
  ARTICLE

  """Only Topic Bookmarks"""
  TOPIC
}

"""Options For Bookmarks Ordering"""
enum BookmarksOrderOptions {
  """Ascending order"""
  ASC

  """Descending order"""
  DESC
}

"""Options For Bookmarks Sorting"""
enum BookmarksSortOptions {
  """When bookmark was added"""
  ADDED

  """Alphabetical order of Topic or/and Article"""
  ALPHABETICAL

  """When Topic or/and Article was updated"""
  UPDATED
}

"""A brief is a collection of topics"""
type Brief {
  """A headline for the brief content"""
  contentHeadline: String!

  """Date of the brief"""
  date: Date!

  """The entries mentioned in this brief"""
  entries: [BriefEntry] @deprecated(reason: "Use sections instead")

  """A status message to be shown when the reader finished the brief"""
  goodbye: StatusMessage! @deprecated(reason: "Use relax field instead")

  """A status message to be shown at the beginning of the brief"""
  greeting: StatusMessage!

  """The brief's unique ID"""
  id: UUID!

  """An introduction for the brief contents"""
  introduction: BriefIntroduction

  """The number of entries in this brief"""
  numberOfEntries: Int!

  """
  A status message with call to action to be shown at the end of the brief
  """
  relax: StatusMessage!

  """Top level sections of which this brief is made"""
  sections: [BriefSection]

  """The total count of unseen entries in this brief"""
  unseenCount: Int!
}

"""An entry of the brief"""
type BriefEntry {
  """Has an entry been seen by a user"""
  isNew: Boolean!

  """Target Item of the brief entry"""
  item: BriefEntryItem!

  """Style description of the entry"""
  style: BriefEntryStyle!
}

"""Target Item of the brief entry"""
union BriefEntryItem = Article | Topic

"""An entry of the brief"""
type BriefEntryStyle {
  """The background color for styling"""
  backgroundColor: HexColor

  """Style of the entry"""
  type: BriefEntryStyleType!
}

"""Types of entry styles available"""
enum BriefEntryStyleType {
  ARTICLE_CARD
  SMALL_ARTICLE_ITEM
  TOPIC_CARD
}

"""An introduction for the brief contents"""
type BriefIntroduction {
  """The introduction's icon"""
  icon: SVG!

  """The introduction's text"""
  text: String!
}

"""A section that includes sub-sections or entries"""
interface BriefSection {
  """The background color for the brief section, if provided"""
  backgroundColor: HexColor

  """The title of the brief section"""
  title: String!
}

"""Call to action message to be displayed in a StatusMessage"""
type CallToActionLink {
  """Relative deep link path e.g. /explore"""
  actionLink: String
  actionText: String!
  preText: String
}

"""A category"""
type Category {
  """The category's color"""
  color: HexColor

  """The category's icon"""
  icon: SVG

  """Globally unique identifier for this category"""
  id: UUID!

  """Items in a category"""
  items(pagination: PaginationInput): [CategoryItem]!

  """The name of the category"""
  name: String!

  """The slug of the category"""
  slug: String!
}

union CategoryItem = Article | Topic

"""Category preference of user"""
type CategoryPreference {
  category: Category!
  isPreferred: Boolean!
}

"""A grouping of channels"""
type ChannelCategory {
  """The channels within this category"""
  channels: [ChannelPreferences]

  """The name of the category"""
  name: String!
}

"""Notification settings for an update channel"""
type ChannelPreferences {
  """The description of the channel"""
  description: String!

  """Indicates whether the user wants to get updates by email"""
  emailEnabled: Boolean!

  """The channel ID"""
  id: String!

  """The name of the channel"""
  name: String!

  """Indicates whether the user wants to get updates by push notification"""
  pushEnabled: Boolean!
}

"""An image hosted on Cloudinary"""
type CloudinaryImage {
  """Image Caption"""
  caption: String

  """The public ID"""
  publicId: String!
}

"""Article content block"""
union ContentBlock = TextBlock

"""Curation info"""
type CurationInfo {
  """Byline to show before curator"""
  byline: String!

  """Curator of article"""
  curator: Curator!
}

"""The one who curated or recommended article"""
union Curator = Editor | EditorialTeam | Expert

"""
The `Date` scalar type represents a date. The Date appears in a JSON
response as an ISO8601 formatted string, without a time component.
"""
scalar Date

"""Date and its optional brief"""
type DatedBrief {
  brief: Brief @deprecated(reason: "Use hasBrief field and getBriefByDate query instead of quering all briefs at once")
  date: Date!
  hasBrief: Boolean
}

"""
The `DateTime` scalar type represents a date and time in the UTC
timezone. The DateTime appears in a JSON response as an ISO8601 formatted
string, including UTC timezone ("Z"). The parsed date and time string will
be converted to UTC if there is an offset.
"""
scalar DateTime

"""Response for account deletion"""
type DeleteAccountResponse {
  successful: Boolean!
}

"""A push notification token for a user's device"""
type DeviceRegistrationToken {
  """The token itself"""
  token: String!

  """The last time the token was updated"""
  updatedAt: DateTime!
}

"""An editor working for informed"""
type Editor {
  """The editor's avatar"""
  avatar: CloudinaryImage

  """Editor's biography"""
  bio: String!

  """The editor's ID"""
  id: UUID

  """The editor's name"""
  name: String!
}

type EditorialTeam {
  """The editorial team avatar. Currently defaults to null"""
  avatar: CloudinaryImage

  """The editorial team bio"""
  bio: String!

  """The editorial team name"""
  name: String!
}

"""A domain expert curating materials"""
type Expert {
  """The expert's area of expertise"""
  areaOfExpertise: String!

  """The expert's avatar"""
  avatar: CloudinaryImage

  """The expert's biography"""
  bio: String!

  """The expert's biography split into chunks of text"""
  chunkedBio: [String]

  """The expert's ID"""
  id: UUID!

  """Link to the expert's Instagram profile"""
  instagram: String

  """Link to the expert's LinkedIn profile"""
  linkedin: String

  """The expert's name"""
  name: String!

  """The expert's real name"""
  realName: String!

  """Link to the expert's twitter profile"""
  twitter: String

  """Link to the expert's Website"""
  website: String
}

interface ExploreArea {
  """The stream's icon"""
  icon: SVG

  """Globally unique identifier for this area"""
  id: String!

  """Should the area be highlighted"""
  isHighlighted: Boolean!

  """Area was selected by user as preferred"""
  isPreferred: Boolean!

  """The name of the area"""
  name: String!
}

"""
The `HexColor` scalar type represents an RGB color value in hexadecimal
notation prefixed with a pound sign, e.g. `#333333`.
"""
scalar HexColor

type HighlightedTopicsExploreArea implements ExploreArea {
  """The background color to be used for styling"""
  backgroundColor: HexColor

  """The area's description"""
  description: String

  """The stream's icon"""
  icon: SVG

  """Globally unique identifier for this area"""
  id: String!

  """Should the area be highlighted"""
  isHighlighted: Boolean!

  """Area was selected by user as preferred"""
  isPreferred: Boolean!

  """The name of the area"""
  name: String!
  topics(pagination: PaginationInput): [Topic]!
}

"""Response for marking entity seen"""
type MarkEntitySeenResponse {
  successful: Boolean!
}

"""Response for markTopicVisited mutation"""
type MarkTopicVisitedResponse {
  successful: Boolean!
}

"""Markup languages used in the API"""
enum MarkupLanguage {
  HTML
  MARKDOWN
}

input PaginationInput {
  limit: Int
  offset: Int
}

"""A publisher"""
type Publisher {
  """The publisher logo (dark version)"""
  darkLogo: CloudinaryImage

  """The database ID"""
  id: UUID!

  """The publisher logo (light version)"""
  lightLogo: CloudinaryImage

  """The publisher logo"""
  logo: CloudinaryImage @deprecated(reason: "Deprecated in favour of the light and dark logo")

  """The name of the publishing house"""
  name: String!
}

"""Payload returned when refreshing the token"""
type RefreshPayload {
  errorMessage: String
  successful: Boolean!
  tokens: AuthTokens
}

"""External image referenced by URL"""
type RemoteImage {
  """Image's public URL"""
  url: String!
}

type RootMutationType {
  """Bookmark an article"""
  bookmarkArticle(
    """The article's slug"""
    slug: String!
  ): BookmarkMutationPayload

  """Bookmark an article or a topic"""
  bookmarkTopic(
    """The topic's slug"""
    slug: String!
  ): BookmarkMutationPayload

  """Soft delete user account (GDPR —Åompliant)"""
  deleteAccount: DeleteAccountResponse

  """Mark article as seen by user"""
  markArticleSeen(slug: String!): MarkEntitySeenResponse

  """Mark topic as seen by user"""
  markTopicSeen(slug: String!): MarkEntitySeenResponse

  """Mark topic as visited by user"""
  markTopicVisited(slug: String!): MarkTopicVisitedResponse

  """Mark category with given id as preferred"""
  preferCategory(categoryId: UUID!): UpdatePreferredCategoriesResponse

  """Exchange the refresh token for a new access token"""
  refresh(refreshToken: String!): RefreshPayload

  """Remove a bookmark"""
  removeBookmark(
    """The bookmarks database ID"""
    id: UUID!
  ): BookmarkMutationPayload

  """Store a device registration token to receive push notifications"""
  savePushDeviceToken(token: String!): DeviceRegistrationToken

  """Send link to App Store informed page to abonent's mobile number"""
  sendLinkToAppStore(
    """User's number"""
    mobileNumber: String!
  ): SendLinkToAppStoreResponse

  """Send a magic login link to an email address"""
  sendMagicLink(callbackUrl: String, email: String!): String

  """Set subscription preferences for a channel"""
  setNotificationChannelPreferences(emailEnabled: Boolean, id: String!, pushEnabled: Boolean): ChannelPreferences

  """Login via OAuth provider provided identity token"""
  signIn(idToken: String, information: UserMeta, provider: String!, token: String): SignInPayload

  """Ensures that user's subscription info is in sync"""
  subscriptionPurchased(productId: String): SubscriptionPurchasedResponse

  """Mark category with given id as non-preferred"""
  unpreferCategory(categoryId: UUID!): UpdatePreferredCategoriesResponse
  unsubscribeFromEmailChannel(channelId: String!, email: String!, token: String!): UnsubscriptionResult

  """Update position in seconds of article audio for the current user"""
  updateArticleAudioPosition(
    """Position in article's audio in seconds"""
    position: Int!

    """The article's slug"""
    slug: String!
  ): UpdateArticleProgressResponse

  """Update text content progress in given article for the current user"""
  updateArticleContentProgress(
    """Progress percentage 0-100"""
    progress: Int!

    """The article's slug"""
    slug: String!
  ): UpdateArticleProgressResponse

  """Update preferred categories for the current user"""
  updatePreferredCategories(categoryIds: [UUID!]): UpdatePreferredCategoriesResponse

  """Store meta information about the current user"""
  updateUserMeta(information: UserMeta!): Account
}

type RootQueryType {
  """Get an article by slug"""
  article(slug: String!): Article @deprecated(reason: "Use the more expressive get_article instead")

  """Current brief"""
  currentBrief: Brief

  """Get an article by slug"""
  getArticle(slug: String!): Article
  getArticleAudioFile(slug: String!): AudioFile

  """Get article bookmark"""
  getArticleBookmark(slug: String!): Bookmark

  """Get user's progress in article with given slug"""
  getArticleProgress(slug: String!): ArticleProgress

  """Get user's history of article views"""
  getArticlesHistory(pagination: PaginationInput = {limit: 10, offset: 0}, progressState: ArticleProgressState): [Article]

  """Request all user's bookmarks"""
  getBookmarks(filter: BookmarksFilterOptions = ALL, order: BookmarksOrderOptions = DESC, pagination: PaginationInput = {limit: 10, offset: 0}, sortBy: BookmarksSortOptions = ADDED): [Bookmark]

  """Get a brief by date"""
  getBriefByDate(date: Date!): Brief

  """A category"""
  getCategory(id: String, slug: String): Category

  """Returns category preference of the user by the given id"""
  getCategoryPreference(id: UUID!): CategoryPreference

  """Returns Category preferences of user"""
  getCategoryPreferences: [CategoryPreference]

  """Retrieve one area in the explore section"""
  getExploreArea(id: String!): ExploreArea

  """The content of the explore section"""
  getExploreSection(isHighlighted: Boolean): [ExploreArea]

  """The featured categories in the pills section"""
  getFeaturedCategories: [Category]

  """Retrieve the user's notification preferences"""
  getNotificationPreferences: [ChannelCategory]

  """Categories that can be selected as preferred"""
  getOnboardingCategories: [Category] @deprecated(reason: "Use getPreferableCategories instead")

  """Returns other entries in current Brief minus given Article"""
  getOtherBriefEntries(articleSlug: String!, briefId: UUID): [BriefEntryItem]

  """Returns other entries in given Topic minus given Article"""
  getOtherTopicEntries(articleSlug: String!, topicSlug: String!): [TopicMediaItem]

  """Get last dates with their briefs (if available)"""
  getPastDaysBriefs: [DatedBrief]

  """Categories that can be selected as preferred"""
  getPreferableCategories: [Category]

  """Get content related to given article"""
  getRelatedContent(pagination: PaginationInput = {limit: 10, offset: 0}, slug: String!): [CategoryItem]

  """Get topic bookmark"""
  getTopicBookmark(slug: String!): Bookmark

  """Get all topics created by the editor"""
  getTopicsFromEditor(editorId: UUID!, excludeTopicSlugs: [String], pagination: PaginationInput): [Topic]

  """Get all topics created by an expert"""
  getTopicsFromExpert(excludeTopicSlugs: [String], expertId: UUID!, pagination: PaginationInput): [Topic]

  """Retrieve information about the current user"""
  me: Account

  """Perform a full-text search"""
  search(pagination: PaginationInput = {limit: 10, offset: 0}, query: String): [SearchResult]

  """Perform a full-text search for articles"""
  searchArticles(pagination: PaginationInput = {limit: 10, offset: 0}, query: String): [Article]

  """Perform a full-text search for topics"""
  searchTopics(pagination: PaginationInput = {limit: 10, offset: 0}, query: String): [Topic]

  """Get a topic by slug"""
  topic(slug: String!): Topic
}

"""A search result"""
union SearchResult = Article | Topic

"""A section that displays entries"""
type SectionWithEntries implements BriefSection {
  """The background color for the section, if provided"""
  backgroundColor: HexColor

  """The entries mentioned in this section"""
  entries: [BriefEntry]

  """The title of the brief section"""
  title: String!
}

"""A section that displays sub-sections"""
type SectionWithSubSections implements BriefSection {
  """The background color for the section, if provided"""
  backgroundColor: HexColor

  """Sub-sections for the parent section"""
  sections: [SectionWithEntries]

  """The title of the section"""
  title: String!
}

"""Response for send_link_to_app_store mutation"""
type SendLinkToAppStoreResponse {
  successful: Boolean!
}

"""Payload returned from the sign in mutation"""
type SignInPayload {
  account: Account
  errorCode: String
  errorMessage: String
  successful: Boolean!
  tokens: AuthTokens
}

type SmallTopicsExploreArea implements ExploreArea {
  """The background color to be used for styling"""
  backgroundColor: HexColor

  """The area's description"""
  description: String

  """The stream's icon"""
  icon: SVG

  """Globally unique identifier for this area"""
  id: String!

  """Should the area be highlighted"""
  isHighlighted: Boolean!

  """Area was selected by user as preferred"""
  isPreferred: Boolean!

  """The name of the area"""
  name: String!
  topics(pagination: PaginationInput): [Topic]!
}

"""A message for the user that can be embedded in the app"""
type StatusMessage {
  """Call to action to be displayed"""
  callToAction: CallToActionLink

  """Markdown-formatted headline"""
  headline: String!
  icon: String

  """Markdown-formatted message"""
  message: String
}

"""Response for account deletion"""
type SubscriptionPurchasedResponse {
  successful: Boolean!
}

"""One highlight in the summary"""
type SummaryCard {
  """The card text (Markdown-formatted)"""
  text: String!
}

"""An SVG image"""
scalar SVG

"""A text formatted with a Markup language"""
type Text {
  """The text content containing markup"""
  content: String!

  """The Markup language used for formatting"""
  markupLanguage: MarkupLanguage!
}

"""Text block of article content"""
type TextBlock {
  backgroundColor: HexColor
  text: Text!
}

"""A topic is a grouping of related articles"""
type Topic {
  """All categories of topic"""
  categories: [Category]

  """Information about content of topic"""
  contentMeta: TopicContentMeta!

  """The cover image"""
  coverImage: CloudinaryImage! @deprecated(reason: "It should no longer be used")

  """Info about the curator of the topic"""
  curationInfo: CurationInfo!

  """Entries of this topic"""
  entries: [TopicEntry]

  """Number of entries in this topic"""
  entryCount: Int!

  """The hero image"""
  heroImage: CloudinaryImage!

  """Outstanding article publishers in this topic"""
  highlightedPublishers: [Publisher] @deprecated(reason: "Use publisherInformation field instead")

  """The topic's database ID"""
  id: UUID!

  """The main image"""
  image: CloudinaryImage! @deprecated(reason: "Main image got deprecated in favour of hero and cover image")

  """An introductory text about the topic"""
  introduction: String!

  """When the topic was last updated"""
  lastUpdatedAt: DateTime!

  """The creator of the topic"""
  owner: TopicOwner! @deprecated(reason: "Use curationInfo field instead")

  """The creator's note to the topic. Only applicable for editor"""
  ownersNote: String

  """Primary category of topic"""
  primaryCategory: Category!

  """The Topics's reading progress"""
  progressState: TopicProgressState!

  """Information about publishers of topic articles"""
  publisherInformation: TopicPublisherInformation! @deprecated(reason: "Use contentMeta field instead")

  """The topic's slug to be used in friendly URLs"""
  slug: String!

  """The topic's title without any Markdown formatting"""
  strippedTitle: String!

  """A summary of the topic (Markdown-formatted)"""
  summary: String

  """The summary split up into multiple flash cards"""
  summaryCards: [SummaryCard]

  """The approximated time it takes to read all entries in this topic"""
  timeToRead: Int

  """The topic's title"""
  title: String!

  """The topic's URL used for sharing"""
  url: String!

  """Does the topic have no new content for the user"""
  visited: Boolean!
}

"""Information about topic"""
type TopicContentMeta {
  """Publishers to show with icons"""
  highlightedPublishers: [Publisher]

  """Text to display near publisher icons"""
  text: String
}

"""An entry in the topic"""
type TopicEntry {
  """The media item"""
  item: TopicMediaItem!

  """The editor's note"""
  note: String

  """The visual styling of the item"""
  style: TopicEntryStyle

  """The URL for sharing this item"""
  url: String!
}

"""Visual styling information for the topic entry"""
type TopicEntryStyle {
  color: HexColor!
  type: TopicEntryStyleType!
}

"""Types of entry styles available"""
enum TopicEntryStyleType {
  ARTICLE_COVER_WITH_BIG_IMAGE
  ARTICLE_COVER_WITHOUT_IMAGE
}

"""A media item in the topic"""
union TopicMediaItem = Article

"""A topic owner is the one responsible for the topic"""
union TopicOwner = Editor | EditorialTeam | Expert

"""Topic Progress"""
enum TopicProgressState {
  FINISHED
  IN_PROGRESS
  UNREAD
}

"""Information about publishers of topic articles"""
type TopicPublisherInformation {
  """Partner publishers with icons"""
  highlightedPublishers: [Publisher]

  """Text to display near partner publisher icons"""
  remainingPublishersIndicator: String
}

type TopicsExploreArea implements ExploreArea {
  """The background color to be used for styling"""
  backgroundColor: HexColor

  """The area's description"""
  description: String

  """The stream's icon"""
  icon: SVG

  """Globally unique identifier for this area"""
  id: String!

  """Should the area be highlighted"""
  isHighlighted: Boolean!

  """Area was selected by user as preferred"""
  isPreferred: Boolean!

  """The name of the area"""
  name: String!
  topics(pagination: PaginationInput): [Topic]!
}

"""Payload returning from unsubscription from a channel"""
type UnsubscriptionResult {
  errorMessage: String
  successful: Boolean!
}

"""Response for article progress mutation"""
type UpdateArticleProgressResponse {
  """
  Text of warning about number of free articles left in current period or null if warning is not necessary
  """
  freeArticlesLeftWarning: String
  progress: ArticleProgress
  progressState: ArticleProgressState!
  successful: Boolean!
}

"""Response for updating preferred categories"""
type UpdatePreferredCategoriesResponse {
  successful: Boolean!
  updatedPreference: CategoryPreference
}

"""User meta information"""
input UserMeta {
  avatarUrl: String
  firstName: String
  lastName: String
}

"""
The `UUID4` scalar type represents UUID4 compliant string data, represented
as UTF-8 character sequences. The UUID4 type is most often used to represent
unique human-readable ID strings.
"""
scalar UUID

