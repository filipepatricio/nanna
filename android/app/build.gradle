def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

def propertyFileNameMap = [
        dev  : 'key_dev.properties',
        stage: 'key_staging.properties',
        prod : 'key_prod.properties'
]
def propertyMap = [:]

for (fileNameEntry in propertyFileNameMap.entrySet()) {
    def keystorePropertiesFile = rootProject.file(fileNameEntry.value)
    if (keystorePropertiesFile.exists()) {
        def keystoreProperties = new Properties()
        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
        propertyMap.put(fileNameEntry.key, keystoreProperties)
    }
}

android {
    compileSdkVersion 30

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        checkReleaseBuilds false
    }

    defaultConfig {
        applicationId "so.informed"
        minSdkVersion 24
        targetSdkVersion 30
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    signingConfigs {
        releaseDev {
            def keystoreProperties = propertyMap['dev']
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }

        releaseStage {
            def keystoreProperties = propertyMap['stage']
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }

        releaseProd {
            def keystoreProperties = propertyMap['prod']
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.releaseDev

            minifyEnabled true
            proguardFiles getDefaultProguardFile(
                    'proguard-android-optimize.txt'),
                    'proguard-rules.pro'
        }

        debug {
            signingConfig signingConfigs.releaseDev
        }
    }

    flavorDimensions "env"

    productFlavors {
        dev {
            dimension "env"

            applicationIdSuffix ".dev"

            resValue "string", "app_name", "Informed Dev"
            resValue "string", "app_link_host", "dev.informed.so"

            if (propertyMap.containsKey('dev')) {
                signingConfig signingConfigs.releaseDev
            }
        }

        stage {
            dimension "env"

            applicationIdSuffix ".test"

            resValue "string", "app_name", "Informed Test"
            resValue "string", "app_link_host", "staging.informed.so"

            if (propertyMap.containsKey('stage')) {
                signingConfig signingConfigs.releaseStage
            }
        }

        prod {
            dimension "env"

            resValue "string", "app_name", "Informed"
            resValue "string", "app_link_host", "informed.so"

            if (propertyMap.containsKey('prod')) {
                signingConfig signingConfigs.releaseProd
            }
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}

apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
